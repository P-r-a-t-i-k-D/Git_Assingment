Module-2: GIT Assignment – 1

Based on what you have learnt in the class, do the following steps: 
● Create a new folder 
● Put the following files in the folder ○ Code.txt ○ Log.txt ○ Output.txt 
● Stage the Code.txt and Output.txt files 
● Commit them 
● And finally push them to GitHub Please share the commands for the above points

Goal: Create a folder, add 3 files, stage 2, commit them, and push to GitHub.

🔧 Steps and Commands:
# 1. Create a folder and go inside
mkdir git-assignment-1
cd git-assignment-1

# 2. Initialize a Git repository
git init

# 3. Create the required files
touch Code.txt Log.txt Output.txt

# 4. Stage only Code.txt and Output.txt
git add Code.txt Output.txt

# 5. Commit the staged files
git commit -m "Add Code.txt and Output.txt"

# 6. Connect to GitHub and push (replace <URL> with your GitHub repo link)
git remote add origin <your-github-repo-url>
git branch -M main
git push -u origin main




Module-2: GIT Assignment – 2

Do the following tasks: 
● Create a git working directory with feature1.txt and feature2.txt in the master branch 
● Create 3 branches develop, feature1 and feature2 
● In develop branch create develop.txt, do not stage or commit it 
● Stash this file, and checkout to feature1 branch 
● Create new.txt file in feature1 branch, stage and commit this file 
● Checkout to develop, unstash this file and commit 
Please submit all the git commands used to do the above steps

Goal: Use branching, stashing, committing, and switching.

🔧 Steps and Commands:
# 1. Create a working directory and initialize Git
mkdir git-assignment-2
cd git-assignment-2
git init

# 2. Create and commit feature1.txt and feature2.txt in master
touch feature1.txt feature2.txt
git add .
git commit -m "Add feature1.txt and feature2.txt in master"

# 3. Create three branches: develop, feature1, feature2
git branch develop
git branch feature1
git branch feature2

# 4. Checkout to develop branch and create develop.txt
git checkout develop
touch develop.txt

# 5. Stash the uncommitted file
git stash

# 6. Switch to feature1 branch and create new.txt
git checkout feature1
touch new.txt
git add new.txt
git commit -m "Add new.txt in feature1 branch"

# 7. Go back to develop, unstash, and commit
git checkout develop
git stash pop
git add develop.txt
git commit -m "Add develop.txt after unstashing"


Module-2: GIT Assignment – 3

You have been asked to: 
● Create a git working directory, with the following branches 
○ Develop 
○ F1
○ f2
● In the master branch, commit main.txt file 
● Put develop.txt in develop branch, f1.txt and f2.txt in f1 and f2 respectively 
● Push all these branches to github 
● On local delete f2 branch 
● Delete the same branch on github as well

Goal: Work with multiple branches and remote operations.

🔧 Steps and Commands:
# 1. Create a new directory and init Git
mkdir git-assignment-3
cd git-assignment-3
git init

# 2. In master branch, create and commit main.txt
touch main.txt
git add main.txt
git commit -m "Add main.txt in master"

# 3. Create develop, f1, and f2 branches
git branch develop
git branch f1
git branch f2

# 4. Add develop.txt in develop
git checkout develop
touch develop.txt
git add develop.txt
git commit -m "Add develop.txt"

# 5. Add f1.txt in f1
git checkout f1
touch f1.txt
git add f1.txt
git commit -m "Add f1.txt"

# 6. Add f2.txt in f2
git checkout f2
touch f2.txt
git add f2.txt
git commit -m "Add f2.txt"

# 7. Push all branches to GitHub (replace with your repo URL)
git remote add origin <your-github-repo-url>
git push -u origin master
git push origin develop
git push origin f1
git push origin f2

# 8. Delete f2 branch locally and remotely
git branch -d f2
git push origin --delete f2


Module-2: GIT Assignment - 4

 You have been asked to: 
● Put master.txt on master branch, stage and commit 
● Create 3 branches: public1, public2 and private 
● Put public1.txt on public 1 branch, stage and commit 
● Merge public 1 on master branch 
● Merge public 2 on master branch 
● Edit master.txt on private branch, stage and commit 
● Now update branch public 1 and public 2 with new master code in private 
● Also update new master code on master 
● Finally update all the code on the private branch

Goal: Merge and sync changes across multiple branches.

🔧 Steps and Commands:
# 1. Create a new directory and initialize Git
mkdir git-assignment-4
cd git-assignment-4
git init

# 2. On master branch
touch master.txt
git add master.txt
git commit -m "Add master.txt"

# 3. Create branches
git branch public1
git branch public2
git branch private

# 4. public1 branch
git checkout public1
touch public1.txt
git add public1.txt
git commit -m "Add public1.txt"

# 5. public2 branch
git checkout public2
touch public2.txt
git add public2.txt
git commit -m "Add public2.txt"

# 6. Merge public1 and public2 into master
git checkout master
git merge public1
git merge public2

# 7. On private branch, edit master.txt
git checkout private
echo "Update from private" >> master.txt
git add master.txt
git commit -m "Update master.txt in private"

# 8. Update public1 and public2 from master
git checkout public1
git merge master

git checkout public2
git merge master

# 9. Update private with the final master version
git checkout private
git merge master

Module-2: GIT Assignment – 5 (GitFlow Workflow)

You have been asked to: 
● Create a gitflow workflow architecture on git 
● Create all the required branches 
● Starting from the feature branch, push the branch to the master, following the 
architecture 
● Push a urgent.txt on master using hotfix

Goal: Follow GitFlow structure including hotfix.

🔧 Steps and Commands:
# 1. Create working directory
mkdir git-assignment-5
cd git-assignment-5
git init

# 2. Create develop branch
git checkout -b develop

# 3. Create a feature branch from develop
git checkout -b feature/user-auth
touch login.txt
git add login.txt
git commit -m "Add login feature"

# 4. Merge feature into develop
git checkout develop
git merge feature/user-auth

# 5. Merge develop into master
git checkout master
git merge develop

# 6. Hotfix: urgent.txt on master
git checkout -b hotfix/urgent-fix
touch urgent.txt
git add urgent.txt
git commit -m "Hotfix: urgent.txt fix"

# 7. Merge hotfix into master
git checkout master
git merge hotfix/urgent-fix


